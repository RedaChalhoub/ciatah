function obj = modelTrackingData(obj)
	% Cleans up tracking data analyzed by ImageJ
	% Biafra Ahanonu
	% started: 2016.02.01
	% inputs
		%
	% outputs
		%

	% changelog
		%
	% TODO
		%

	try
		scnsize = get(0,'ScreenSize');
		dlgSize = [scnsize(3)*0.7 scnsize(4)*0.8];
		usrIdxChoiceStr = {'runObjTracking','cleanTrackingData','plotSpecificX','saveTrackingDataSummary','loadTrackingData'};
		[sel, ok] = listdlg('ListString',usrIdxChoiceStr,'ListSize',dlgSize);
		usrIdxChoiceList = {2,1};
		analysisToRun = usrIdxChoiceStr{sel};

		% ===================================
		% run classifier if haven't already
		% obj.computeClassifyTrainSignals();

		% ===================================
		% save all classified cells to respective folder
		switch analysisToRun
			case 'runObjTracking'
				newFolderList = inputdlg('one new line per AVI file path or enter single line to TXT file with list of AVIs','add folders',[1 100])
				newFolderList = newFolderList{1,1};
				newFolderList = cellstr(newFolderList);
				trackingSettings = inputdlg({...
						'path to store tracking files in? char str',...
						'draw a mask for arena? 1=yes|0=no',...
						'run analysis in parallel? 1=yes|0=no',...
						'number of frames to analyze (leave blank to analyze all)? integer',...
						'save tracking to individual folders (matching parent dir)? 1=yes|0=no',...
						'length of reference line? in cm, float'
					},...
					'tracking clean-up settings',1,...
					{...
						obj.trackingDir,...
						'0',...
						'1',...
						'',...
						'1',...
						'30.48'...
					}...
				);
				s=1;
				tmpOptions.saveTrackingTableRootPath = trackingSettings{s};obj.trackingDir = trackingSettings{s};s=s+1;
				tmpOptions.drawMask = str2num(trackingSettings{s});s=s+1;
				tmpOptions.parallel = str2num(trackingSettings{s});s=s+1;
				tmpOptions.nFramesAnalyze = str2num(trackingSettings{s});s=s+1;
				tmpOptions.saveTrackingIndividualFolders = str2num(trackingSettings{s});s=s+1;
				tmpOptions.lengthRefLine = str2num(trackingSettings{s});s=s+1;
				[centroid,orientation] = objTracking_v1(newFolderList,'options',tmpOptions);

			case 'cleanTrackingData'
				if iscell(obj.videoDir); videoDir = strjoin(obj.videoDir,','); else videoDir = obj.videoDir; end;

				trackingSettings = inputdlg({...
							'tracking files parent directory',...
							'files in subfolder? (1 = yes, 0 = no)',...
							'tracking files folder regexp',...
							'tracking file regexp',...
							'flip order folder list?  (1 = yes, 0 = no)'...
							'velocity cut off (px)',...
							'save files?  (1 = yes, blank = no)',...
							'group files in folder? (1 = yes, 0 = no)',...
							'frames per second',...
							'behavior video directory',...
							'behavior video regexp',...
							'recursive',...
						},...
						'tracking clean-up settings',1,...
						{...
							obj.trackingDir,...
							'0',...
							'20\d+',...
							'.csv',...
							'0',...
							num2str(Inf),... % num2str(7.62*10)
							'',...
							'0',...
							'20',...
							videoDir,...
							'openfield.*.avi',...
							'0',...
						}...
					);
				s1 = 1;
				trackingDir = trackingSettings{s1}; s1=s1+1;obj.trackingDir = trackingDir;
				subfolderFlag = str2num(trackingSettings{s1}); s1=s1+1;
				folderRegExp = trackingSettings{s1}; s1=s1+1;
				fileRegExp = trackingSettings{s1}; s1=s1+1;
				flipFolderFileListSwitch = str2num(trackingSettings{s1}); s1=s1+1;
				velocityCutoff = str2num(trackingSettings{s1}); s1=s1+1;
				saveFileSwitch = str2num(trackingSettings{s1}); s1=s1+1;
				groupFilesInFolderSwitch = str2num(trackingSettings{s1}); s1=s1+1;
				framesPerSecond = str2num(trackingSettings{s1}); s1=s1+1;
				obj.videoDir = strsplit(trackingSettings{s1},','); s1=s1+1; videoDir = obj.videoDir;
				videoTrialRegExp = trackingSettings{s1}; s1=s1+1;
				recursiveFlag = str2num(trackingSettings{s1}); s1=s1+1;

				% videoTrialRegExp = [obj.date{obj.fileNum} '_' obj.protocol{obj.fileNum} '_' obj.subjectStr{obj.fileNum} '_' obj.assay{obj.fileNum}];

				% videoTrialRegExp = [obj.date{obj.fileNum} '_' obj.protocol{obj.fileNum} '_' obj.subjectStr{obj.fileNum} '_' obj.assay{obj.fileNum}];

				vidList = getFileList(obj.videoDir,videoTrialRegExp,'recursive',recursiveFlag);
				cellfun(@disp,vidList)

				if subfolderFlag==1
					regFileList = getFileList(getFileList(trackingDir,folderRegExp),fileRegExp);
				else
					regFileList = getFileList(trackingDir,fileRegExp);
				end
				cellfun(@disp,regFileList)

				removeIncorrectObjs(...
					regFileList,...
					'saveFile',saveFileSwitch,...
					'groupFilesInFolder',groupFilesInFolderSwitch,...
					'flipFolderFileList',flipFolderFileListSwitch,...
					'framesPerSecond',framesPerSecond,...
					'inputMovie',vidList);
				% removeIncorrectObjs(getFileList(trackingDir,fileRegExp,'recusive',1),'saveFile',saveFileSwitch,'groupFilesInFolder',0,'flipFolderFileList',str2num(trackingSettings{4}),'velocityCutoff',velocityCutoff);
				% removeIncorrectObjs(getFileList(getFileList('X:\data\behavior\p355\tmp','201'),'calcium.*.csv'),'saveFile',1,'groupFilesInFolder',1);
			case 'plotSpecificX'
				trackingSettings = inputdlg({...
							'tracking files parent directory',...
							'folder regexp',...
							'file regexp',...
							'flip order folder list?  (1 = yes, 0 = no)'...
							'velocity cut off (px)',...
							'save files?  (1 = yes, blank = no)',...
							'group files in folder? (1 = yes, 0 = no)',...
							'frames per second'
						},...
						'tracking clean-up settings',1,...
						{...
							obj.trackingDir,...
							'201\d+',...
							'.csv',...
							'0',...
							num2str(7.62*10),...
							'',...
							'1',...
							'20',...
						}...
					);
				trackingDir = trackingSettings{1};obj.trackingDir = trackingDir;
				folderRegExp = trackingSettings{2};
				fileRegExp = trackingSettings{3};
				flipFolderFileListSwitch = str2num(trackingSettings{4});
				velocityCutoff = str2num(trackingSettings{5});
				saveFileSwitch = str2num(trackingSettings{6});
				groupFilesInFolderSwitch = str2num(trackingSettings{7});
				framesPerSecond = str2num(trackingSettings{8});

				fileList = getFileList(trackingDir,fileRegExp);
				nFiles = length(fileList);
				for fileNo = 1:nFiles
					thisFile = fileList{fileNo};
					[outputTable] = readExternalTable(thisFile,'delimiter',',');
					figure(fileNo);plot(outputTable.XM_cm);title(thisFile);drawnow
					zoom on;
					viewHotKeyAcc(fileNo);
				end
			case 'saveTrackingDataSummary'
				trackingSettings = inputdlg({...
							'loading parent directory',...
							'folder regexp',...
							'file regexp',...
							'flip order folder list?'...
						},...
						'tracking clean-up settings',1,...
						{...
							obj.trackingDir,...
							'201\d+',...
							'cleaned',...
							'0'...
						}...
					);
				trackingDir = trackingSettings{1};
				obj.trackingDir = trackingDir;
				fileRegExp = trackingSettings{3};
				trackingTableFilteredCell = removeIncorrectObjs(getFileList(trackingDir,fileRegExp),'saveFile',[],'groupFilesInFolder',0);
				fileGroup = strrep(strrep(strrep(strrep(trackingTableFilteredCell.file,'recording',''),'.avi',''),'.tracking',''),'_',' ');
				trackingTableFilteredCell.assay = fileGroup;

				func = @(velocity_cm) sum(velocity_cm);
				% B = rowfun(func,trackingTableFilteredCell,...
				%     'InputVariables',{'velocity_cm'},...
				%     'GroupingVariables',{'date','subject','assay','file','filePath','binGroupAll'},...
				%     'OutputVariableName','distance_traveled');
				B = rowfun(func,trackingTableFilteredCell,...
					'InputVariables',{'velocity_cm'},...
					'GroupingVariables',{'date','subject','assay','file','filePath'},...
					'OutputVariableName','distance_traveled');
				savePath = [obj.dataSavePath filesep obj.protocol{1} '_trackingSummary.csv'];
				display(savePath)
				writetable(B,savePath,'FileType','text','Delimiter',',');

			case 'loadTrackingData'
				% ===================================
				trackingSettings = inputdlg({...
							'loading parent directory',...
							'file regexp',...
							'recursive?',...
							'specific filter?'...
							'obj.stimulusTableValueName',...
							'obj.stimulusTableFrameName',...
							'obj.stimulusTableSessionName'...
						},...
						'view movie settings',1,...
						{...
							obj.trackingDir,...
							'cleaned',...
							'0',...
							'date',...
							obj.stimulusTableValueName,...
							obj.stimulusTableFrameName,...
							obj.stimulusTableSessionName...
						}...
					);
				% Slice and date
				% listOfTrackingFiles = getFileList(trackingSettings{1},trackingSettings{2},'recusive',str2num(trackingSettings{3}));
				trackingDir = trackingSettings{1};
				obj.trackingDir = trackingDir;
				fileRegExp = trackingSettings{2};
				recursive = str2num(trackingSettings{3});
				filterSpecificObjProperty = trackingSettings{4};
				listOfTrackingFiles = getFileList(trackingDir,fileRegExp,'recusive',recursive);

				obj.stimulusTableValueName = trackingSettings{5};
				obj.stimulusTableFrameName = trackingSettings{6};
				obj.stimulusTableSessionName = trackingSettings{7};

				% listOfTrackingFiles = listOfTrackingFiles(1:10);

				% Partition the files into date-subject pairs and load each table then convert to vector array to save memory and speed-up.
				cellfun(@disp,listOfTrackingFiles);
				nFiles = length(listOfTrackingFiles);
				fileDates = {};
				fileSubjects = {};
				for fileNo = 1:nFiles
					fileInfo = getFileInfo(listOfTrackingFiles{fileNo});
					fileDates{fileNo} = fileInfo.date;
					fileSubjects{fileNo} = fileInfo.subject;
					fileAssays{fileNo} = fileInfo.assay;
				end
				uniquefileDates = unique(fileDates)
				uniquefileSubjects = unique(fileSubjects);
				uniquefileAssays = unique(fileAssays);
				[p,q,r] = meshgrid(1:length(uniquefileDates), 1:length(uniquefileSubjects), 1:length(uniquefileAssays));
				idPairs = [p(:) q(:) r(:)];
				% idPairs = unique(sort(idPairs,2),'rows');
				% idPairs((idPairs(:,1)==idPairs(:,2)),:) = [];
				nPairs = size(idPairs,1);
				for idPairNum = 1:nPairs
					try
						idNum1 = idPairs(idPairNum,1);
						idNum2 = idPairs(idPairNum,2);
						idNum3 = idPairs(idPairNum,3);
						dateIdx = strcmp(fileDates,uniquefileDates{idNum1});
						subjectIdx = strcmp(fileSubjects,uniquefileSubjects{idNum2});
						assayIdx = strcmp(fileAssays,uniquefileAssays{idNum3});
						fileIdx = dateIdx&subjectIdx&assayIdx;
						if sum(fileIdx)==0
							display('skipping...')
							continue
						end
						display('===================')
						display([num2str(idPairNum) '/' num2str(nPairs) ': ' uniquefileDates{idNum1} ' | ' uniquefileSubjects{idNum2} ' | ' uniquefileAssays{idNum3}])
						thisFileList = listOfTrackingFiles(fileIdx);
						obj.continuousStimulusTable = thisFileList;

						dateIdx = strcmp(obj.date,uniquefileDates{idNum1});
						subjectIdx = strcmp(obj.subjectStr,uniquefileSubjects{idNum2});
						assayIdx = strcmp(obj.assay,uniquefileAssays{idNum3});
						folderIdx = dateIdx&subjectIdx&assayIdx;
						folderIdx = find(folderIdx);
						% check that actually a folder, else skip (ensure don't erase past loaded data)
						if isempty(folderIdx)
							display('skipping...')
							continue;
						end

						% obj.continuousStimulusTable = listOfTrackingFiles;
						%options.continuousStimulusTable	 = getFileList('A:\biafra\data\behavior\p215\tracking\cleaned\','cleaned');
						obj.continuousStimulusNameArray = {'XM','YM','Angle','XM_cm','YM_cm'};
						obj.continuousStimulusSaveNameArray = strrep(obj.continuousStimulusNameArray,'_','__');
						obj.continuousStimulusIdArray = [1 2 3 4 5];
						obj.continuousStimulusTimeSeq = {[-5:5],[-5:5],[-5:5],[-5:5],[-5:5]};

						if ~isempty(obj.continuousStimulusTable)&~strcmp(class(obj.continuousStimulusTable),'table')
							obj.delimiter = ',';
							obj.modelReadTable('table','continuousStimulusTable','addFileInfoToTable',1);
							obj.delimiter = ',';
							obj.modelTableToStimArray(...
								'table','continuousStimulusTable',...
								'tableArray','continuousStimulusArray',...
								'nameArray','continuousStimulusNameArray',...
								'idArray','continuousStimulusIdArray',...
								'valueName',obj.stimulusTableValueName,...
								'frameName',obj.stimulusTableFrameName,...
								'trialName',obj.stimulusTableSessionName,...
								'grabStimulusColumnFromTable',1,...
								'disableMissingFilesOutput',1,...
								'filterSpecificObjProperty',filterSpecificObjProperty,...
								'specificFolder',folderIdx);
						end
					catch err
						display(repmat('@',1,7))
						disp(getReport(err,'extended','hyperlinks','on'));
						display(repmat('@',1,7))
					end
				end
				return
			case 'detectTurns'
				% ask user for number of regions to look for turns in

				% loop over each folder

					% get X and Y coordinates

					% look for all X,Y coordinates that enter/exit the region of interest

					% detect when X or Y becomes negative to a large degree, loop over all enter/exit pairs

				% grab a frame from the video corresponding to the turn point


			otherwise
				% body
		end
	catch err
		display(repmat('@',1,7))
		disp(getReport(err,'extended','hyperlinks','on'));
		display(repmat('@',1,7))
	end

end